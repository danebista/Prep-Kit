class Solution {
    int ans;
    public int longestCycle(int[] edges) {
        int n= edges.length;
        int[] distance = new int[n];
        Arrays.fill(distance,-1);
        boolean[] visited = new boolean[n];
        boolean[]currPath= new boolean[n];
        ans = -1;
        for (int i=0; i< edges.length; i++){
            if (!visited[i]){
                dfs(i, edges,1, distance, visited, currPath);
            }
        }

        return ans;
    }

    public void dfs(int node, int[]edges,int dis,  int[]distance, boolean[]visited, boolean[] currPath){
        if (edges[node]==-1) {
            visited[node]=true;
            return;
        }
        if (visited[node]==true) return;

        distance[node]=dis;
        currPath[node]=true;
        
        if (!currPath[edges[node]]){
            
            dfs(edges[node], edges, dis+1, distance, visited, currPath);

        }
        else if (currPath[node]){
            ans = Math.max(ans, dis-distance[edges[node]]+1);
        } 
        visited[node]=true;
        currPath[node]=false;
    }
}
