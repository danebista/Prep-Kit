class Solution {
    public long maxPoints(int[][] points) {
       
        long[][]dp = new long[points.length][points[0].length];
        for (int i=0; i< dp[0].length; i++){
            dp[0][i] = points[0][i];
        }
        
        for (int i=1; i<points.length; i++){
            long left[] = new long[points[0].length];
            long right[] = new long[points[0].length];
            left[0]=dp[i-1][0]+0;
            for (int k=1; k< points[0].length; k++){
                left[k] =Math.max(left[k-1], dp[i-1][k]+k);
            }
            //dp[i-1][last]-k = dp[i-1][last]-(last){last is total-1}
            right[points[0].length-1] = dp[i-1][points[0].length-1]-(points[0].length-1);
            for (int k=points[0].length-2; k>=0; k--){
                right[k] = Math.max(right[k+1], dp[i-1][k]-k);
            }

            for (int j=0; j<points[0].length; j++){
                dp[i][j]= Math.max(left[j]-j+points[i][j], right[j]+j+points[i][j]);
            }
        }
        long max=Long.MIN_VALUE;
        for (int j=0; j< points[0].length; j++){
            max = Math.max(max, dp[points.length-1][j]);
        }
        
        return max;
        //1 2 3
        //. j
        // for indexes greater than j points[i][j]+dp[i-1][k]-(k-j)
        // for indexes lesser than j points[i][j]+dp[i-1][k]-(j-k)
        
    }

}

//TLE
class Solution {
    public long maxPoints(int[][] points) {
       
        long[][]dp = new long[points.length][points[0].length];
        for (int i=0; i< dp[0].length; i++){
            dp[0][i] = points[0][i];
        }
        
        for (int i=1; i<points.length; i++){
            for (int j=0; j< points[0].length; j++){
                dp[i][j] = calculate(i, j, points, dp);
            }
        }

        points[i][j] + dp[i-1][k]- (j-k)
        points[i][j] + dp[i-1][k]-(k-j)


        long maxi = Integer.MIN_VALUE;
        for (int j=0; j< points[0].length; j++){
            maxi = Math.max(maxi, dp[points.length-1][j]);
        }

        return maxi;
    }

    public long calculate (int i, int j, int[][] grid, long[][]dp){
        long minimum = Long.MIN_VALUE;
        for (int k=0; k< grid[0].length; k++){
            minimum = Math.max(minimum,(long) grid[i][j]+(long)dp[i-1][k]-(long) Math.abs(j-k));
        }

        return minimum;
    }
}
