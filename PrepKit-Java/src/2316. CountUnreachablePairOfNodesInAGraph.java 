class Solution {
    public long countPairs(int n, int[][] edges) {
        UnionFind un = new UnionFind(n);

        for (int i=0; i< edges.length; i++){
            un.union(edges[i][0], edges[i][1]);
        }
      
        int[] size = new int[n];
        for (int i = 0; i < n; ++ i) {
            size[un.findParent(i)] ++;
        }
        System.out.println(Arrays.toString(un.parent));
        long pairs=0;
        long remaining =n;
        
        for (int s: size) {
        
            if (s == 0) {
                continue;
            }
            remaining -= s;
            pairs += s * remaining;
        }

        return  pairs;
    }

    class UnionFind{
        int[] parent;
        int[] rank;
        UnionFind(int n){
            parent = new int[n];
            for (int i=0; i< parent.length; i++){
                parent[i]=i;
            }
            rank = new int[n];
        }

        public int findParent(int n){
            if (parent[n] == n){
                return n;
            } 

            return parent[n] = findParent(parent[n]);
            
        }

        public void union(int m, int n){
        
            int p_u= findParent(m);
            int p_v= findParent(n);
            if (p_v==p_u) return;
            if (rank[p_u]>rank[p_v]){
                parent[p_v]=p_u;
                
            }
            else if (rank[p_v]< rank[p_u]){
                parent[p_u]=p_v;
            }
            else {
                parent[p_u] = p_v;
                rank[p_v]++;
            }
        }
    }
}
