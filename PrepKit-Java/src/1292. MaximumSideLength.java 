
class Solution {
    public int maxSideLength(int[][] mat, int threshold) {
        int m = mat.length;
        int n = mat[0].length;

        int[][] presum = new int[m][n];

        for (int i=0; i<m; i++){
            for (int j=0; j<n; j++){
                int val = 0;
                val = mat[i][j];
                if (i-1>=0) val+=presum[i-1][j];
                if (j-1>=0) val+=presum[i][j-1];
                if (i-1>=0 && j-1>=0) val-=presum[i-1][j-1];
                presum[i][j]=val;
             }
        }

        int l = 0;
        int r = Math.max(m,n);
        int res=0;
        while (l<=r){
            int mid=l+(r-l)/2;
            if (valid(mid, presum, threshold)){
                l=mid+1;
                res=Math.max(res,mid);
            }
            else {
                r=mid-1;
            }
        }

        return res;
     }
 
    public boolean valid (int mid, int[][]presum, int threshold){
        int m = presum.length; 
        int n = presum[0].length;
        for (int i=0; i<m; i++){
            for (int j=0; j<n; j++){
                int c = i+mid-1;
                int d = j+mid-1;
                if (c>=m || d>=n || c<0 ||d<0) continue;
                int val = presum[c][d];
                if (j-1>=0) val-=presum[c][j-1];
                if (i-1>=0) val-=presum[i-1][d];
                if (i-1>=0 && j-1>=0) val+= presum[i-1][j-1];
                if (val <=  threshold){
                    return true;
                }
            }
        }

        return false;

    }
}
