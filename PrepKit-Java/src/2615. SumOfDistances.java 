class Solution {
    public long[] distance(int[] nums) {
         int n = nums.length;
    Map<Integer, List<Integer>> indexMap = new HashMap<>();
    for (int i = 0; i < n; i++) {
        indexMap.putIfAbsent(nums[i], new ArrayList<>());
        indexMap.get(nums[i]).add(i);
    }
    long[] res = new long[n];
    for (Map.Entry<Integer, List<Integer>> entry : indexMap.entrySet()) {
        int num = entry.getKey();
        List<Integer> indices = entry.getValue();
        int m = indices.size();
        long[] prefixSums = new long[m];
        long[] suffixSums = new long[m];
    
        for (int i = 1; i < m; i++) {
            prefixSums[i] = prefixSums[i - 1] + (indices.get(i) - indices.get(i - 1)) * i;
            
        }
        System.out.println(Arrays.toString(prefixSums));
        for (int i = m - 2; i >= 0; i--) {
            suffixSums[i] = suffixSums[i + 1] + (indices.get(i + 1) - indices.get(i)) * (m - i - 1);
        }
        System.out.println(Arrays.toString(suffixSums));
        for (int i = 0; i < m; i++) {
            res[indices.get(i)] = prefixSums[i] + suffixSums[i];
        }
    }
    return res;
    }         
 
}

//draw arrows and understand
