class Solution {
    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
        HashSet<String> pos = new HashSet<>();
        HashSet<String> neg = new HashSet<>();

        for (String s: positive_feedback){
           pos.add(s);
        } 
        
        for (String s: negative_feedback){
           neg.add(s);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.score==b.score?a.id-b.id: b.score-a.score);
        for (int i=0; i< report.length; i++){
            String[] words = report[i].split(" ");
            int score=0;
            for (String word: words){
                if (pos.contains(word)) score+=3;
               
                if (neg.contains(word)) score-=1;
                 
            }
            //System.out.println(score);
            pq.offer(new Pair(student_id[i], score));
        }
        List<Integer> result = new ArrayList<>();

        while (k>0){
            Pair curr = pq.poll();
            result.add(curr.id);
            k--;
        }   
        return result;
    }

    class Pair{
        String word;
        int id;
        int score;
        Pair (int id, int score){
            this.id=id;
            this.score=score;
        }
    }
}
