class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m= grid.length;
        int n= grid[0].length;
        int[][]dp = new int[m][n];

        for (int j=0; j< n; j++){
            dp[0][j] = grid[0][j]; 
        }

        for (int i=1; i<m; i++){
            for (int j=0; j< n; j++){
                dp[i][j] = calculateValue(grid, moveCost, i, j, dp);
            }
        }

        int min=Integer.MAX_VALUE;

        for (int j=0; j<n; j++){
            min = Math.min(min, dp[m-1][j]);
        }

        return min;
    }

    public int calculateValue(int[][]grid, int[][]moveCost, int i, int j, int[][]dp){
        int min = Integer.MAX_VALUE;
        for (int k=0; k< grid[0].length; k++){
            min= Math.min(min, dp[i-1][k]+grid[i][j]+moveCost[grid[i-1][k]][j]);
        }

        return min;
    }
}
