/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> result;
    public List<Integer> inorderTraversal(TreeNode root) {
        result = new ArrayList<Integer>();
        TreeNode current = root;
        while (current != null){
            if (current.left == null){
                result.add(current.val);
                current = current.right;     
            }
            else{
                TreeNode leftSide = current.left;
                System.out.println(leftSide.val);
                while(leftSide.right != null &&
                     leftSide.right != current){
                    leftSide = leftSide.right;
                }
                
                if (leftSide.right==current){
                    leftSide.right=null;
                    result.add(current.val);
                    current = current.right;
                }
                else{
                    leftSide.right = current;
                    current = current.left;
                }
            }
        }
        //if (root == null) return result;
        //inorderGenerator(root);
        
        return result;
    }
    
    public void inorderGenerator(TreeNode root){
        if (root==null) return;
        inorderGenerator(root.left);
        result.add(root.val);
        inorderGenerator(root.right);
    }
}
